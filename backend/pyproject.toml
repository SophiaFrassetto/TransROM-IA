[project]
name = "transrom-ia-backend"
version = "0.1.0"
description = "AI-Assisted ROM Translation and Dubbing System"
authors = [
    { name = "TransROM-IA Team" },
]
dependencies = [
    "fastapi>=0.115.12",
    "uvicorn>=0.34.0",
    "sqlalchemy>=2.0.40",
    "pydantic>=2.11.0",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.10",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "google-auth>=2.27.0",
    "google-auth-oauthlib>=1.2.0",
    "python-dotenv>=1.0.1",
    "email-validator>=2.1.0",
    "requests>=2.31.0",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.1.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "MIT" }

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "httpx>=0.27.0",
    "coverage>=7.4.0",
    "black>=24.2.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes by default.
select = ["E", "F", "I", "N", "B", "A", "C4", "PT", "RET", "SIM", "ARG", "ERA", "PL", "RUF"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.9
target-version = "py39"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
source = ["app"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]
